'use client';

import { useEffect, useState } from 'react';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';

// üîπ Mapowanie prefiks√≥w na nazwy podkategorii
const prefixToLabel: Record<string, string> = {
  karmienie: 'Podczas karmienia',
  narowy: 'Narowy',
  odejscie: 'Odej≈õcie od koni',
  uwiaz: 'Prowadzenie na uwiƒÖzie',
  vaa: 'Test VAA',
  fha: 'Test FHA',
  czyszczenie: 'Podczas czyszczenia',
  ubieranie: 'Podczas ubierania',
  pysk: 'Zachowania pyska',
  glowa: 'G≈Çowa i szyja',
  ogon: 'Ogon',
  chod: 'Ch√≥d',
  opor: 'Op√≥r',
  oddech: 'Oddech',
  spocenie: 'Spocenie',
  otoczenie: 'Reakcja na otoczenie',
  interakcja: 'Interakcja z cz≈Çowiekiem',
  apetyt: 'Apetyt',
};

// üîπ Mapowanie prefiks√≥w na kategorie g≈Ç√≥wne
const prefixToCategory: Record<string, string> = {
  karmienie: 'Sytuacje codzienne',
  narowy: 'Sytuacje codzienne',
  odejscie: 'Sytuacje codzienne',
  uwiaz: 'Sytuacje codzienne',
  vaa: 'Przed treningiem',
  fha: 'Przed treningiem',
  czyszczenie: 'Przed treningiem',
  ubieranie: 'Przed treningiem',
  pysk: 'Podczas treningu',
  glowa: 'Podczas treningu',
  ogon: 'Podczas treningu',
  chod: 'Podczas treningu',
  opor: 'Podczas treningu',
  oddech: 'Po treningu',
  spocenie: 'Po treningu',
  otoczenie: 'Po treningu',
  interakcja: 'Po treningu',
  apetyt: 'Po treningu',
};

// üîπ Kolejno≈õƒá kategorii
const categoryOrder = [
  'Sytuacje codzienne',
  'Przed treningiem',
  'Podczas treningu',
  'Po treningu',
];

// üîπ Kolory dla konkretnych zachowa≈Ñ
const behaviorColorMap: Record<string, 'red' | 'yellow' | 'green'> = {
  'Agresywny do ludzi i koni (straszy lub pr√≥buje ugry≈∫ƒá)': 'red',
  'Agresywny tylko do koni (atakuje inne konie)': 'red',
  'Niecierpliwy (kopie przedniƒÖ nogƒÖ, wierci siƒô po boksie)': 'yellow',
  'Dopomina siƒô delikatnie (r≈ºy i wypatruje osoby karmiƒÖcej)': 'green',
  'Spokojnie czeka na karmienie (nie denerwuje siƒô)': 'green',
  '≈Åykanie (po≈Çykanie powietrza)': 'yellow',
  'Tkanie (bujanie siƒô)': 'yellow',
  'Heblowanie (tarcie zƒôbami o powierzchnie)': 'yellow',
  'KrƒÖ≈ºenie po boksie': 'yellow',
  'Lizanie/gryzienie ≈õcian': 'yellow',
  'Autoagresja (gryzienie siƒô po piersiach, bokach)': 'red',
  'Inne narowy': 'yellow',
  'Ko≈Ñ nie ma narow√≥w': 'green',
  'Ko≈Ñ ≈Çatwo od≈ÇƒÖcza siƒô od innych koni': 'green',
  'Zaniepokojony, ale reaguje na polecenia osoby prowadzƒÖcej': 'yellow',
  'Niebezpieczny, nie reaguje na polecenia prowadzƒÖcego': 'red',
  'Chƒôtnie podƒÖ≈ºa za cz≈Çowiekiem i reaguje na polecenia': 'green',
  'Wymaga korekt co jaki≈õ czas': 'yellow',
  'Skupiony na otoczeniu, nie reaguje na polecenia prowadzƒÖcego': 'red',
  'Ko≈Ñ podchodzi, chce powƒÖchaƒá rƒôkƒô': 'green',
  'Ko≈Ñ nie podchodzi i nie nawiƒÖzuje kontaktu': 'yellow',
  'Unikanie lub agresja - ko≈Ñ odwraca siƒô zadem lub straszy ugryzieniem': 'red',
  'Zachowania agresywno - obronne (straszenie, gryzienie, kopanie)': 'red',
  'Unikanie (odsuwanie siƒô przy pr√≥bie dotyku)': 'yellow',
  'Chƒôƒá kontaktu (pozostaje spokojny, ciekawy, pozwala na dotyk)': 'green',
  'Ko≈Ñ nie mo≈ºe byƒá wiƒÖzany lub musi byƒá wiƒÖzany na dw√≥ch uwiƒÖzach': 'red',
  'Odsuwanie siƒô od szczotki przy czyszczeniu grzbietu lub okolic poprƒôgu (ugina plecy, unosi grzbiet)': 'red',
  'Nie pozwala dotknƒÖƒá g≈Çowy lub uszu': 'yellow',
  'Nie podnosi wszystkich n√≥g': 'yellow',
  'Ko≈Ñ stoi spokojnie, przywiƒÖzany na pojedynczym uwiƒÖzie, podaje wszystkie kopyta': 'green',
  'Intensywne gryzienie wƒôdzid≈Ça': 'yellow',
  'Cofniƒôte uszy': 'yellow',
  'Intensywne wpatrywanie siƒô z po≈Ço≈ºonymi uszami': 'yellow',
  'Wiercenie siƒô / nerwowo≈õƒá': 'yellow',
  'Machanie ogonem': 'yellow',
  'Obracanie g≈ÇowƒÖ w stronƒô poprƒôgu': 'yellow',
  'Pr√≥by ugryzienia je≈∫d≈∫ca': 'red',
  'Pocieranie nosem je≈∫d≈∫ca': 'yellow',
  'Zadzieranie g≈Çowy przy zak≈Çadaniu og≈Çowia': 'yellow',
  'Wymagana pomoc drugiej osoby': 'yellow',
  'Ko≈Ñ stoi spokojnie podczas ubierania': 'green',
  'Uszy cofniƒôte przez ‚â•5 sekund': 'yellow',
  'Zamkniƒôte oczy przez 2-5 sekund': 'yellow',
  'Widoczna tward√≥wka (bia≈Çko oka)': 'yellow',
  'Pusty wzrok przez ‚â•5 sekund': 'yellow',
  'Otwieranie/zamykanie pyska ‚â•10 sekund': 'yellow',
  'Ruch jƒôzyka, wysuwanie': 'yellow',
  'Przesuniƒôcie wƒôdzid≈Ça na jednƒÖ stronƒô, opieranie siƒô na jednej wodzy': 'yellow',
  'Ko≈Ñ nie wykazuje nieprawid≈Çowo≈õci w ustawieniu g≈Çowy i szyi': 'green',
  'Unoszenie/opuszczanie g≈Çowy niesynchroniczne z ruchem k≈Çusa': 'yellow',
  'Przechylanie g≈Çowy': 'yellow',
  'G≈Çowa powy≈ºej pionu ‚â•10s': 'yellow',
  'G≈Çowa za pionem ‚â•10s': 'yellow',
  'Rzucanie, skrƒôcanie g≈ÇowƒÖ, krƒôcenie g≈ÇowƒÖ na boki': 'yellow',
  'Ko≈Ñ nie wykazuje ≈ºadnego z powy≈ºszych zachowa≈Ñ': 'green',
  'Ogon trzymany na bok': 'yellow',
  'Ogon wci≈õniƒôty miƒôdzy po≈õladkami': 'yellow',
  'Energiczne, nerwowe machanie ogonem': 'yellow',
  'Ogon bez napiƒôcia, zwisajƒÖcy swobodnie': 'green',
  'Zbyt szybkie tempo (>40 krok√≥w/15s)': 'yellow',
  'Zbyt wolne tempo (<35 krok√≥w/15s)': 'yellow',
  'Trzy≈õladowy ruch': 'yellow',
  'B≈Çƒôdy galopu: zmiany n√≥g, galop krzy≈ºowy': 'yellow',
  'Samoczynne zmiany chodu': 'yellow',
  'Potykanie siƒô, ciƒÖgniƒôcie czubk√≥w kopyt': 'yellow',
  'Ko≈Ñ porusza siƒô swobodnym, rytmicznym chodem': 'green',
  'Zmiana kierunku / p≈Çoszenie siƒô / ponoszenie': 'red',
  'Op√≥r przed ruchem, zatrzymywanie siƒô / odmowa wykonania ruchu, np. skok√≥w': 'red',
  'Stawanie dƒôba': 'red',
  'Brykanie': 'red',
  'Ko≈Ñ chƒôtnie wsp√≥≈Çpracuje i wykonuje polecenia': 'green',
  'Ko≈Ñ oddycha intensywnie pracujƒÖc bokami': 'red',
  'Ko≈Ñ nie pracuje intensywnie bokami, ale wykonuje 1 oddech w ciƒÖgu ok. 1-2 sekund': 'yellow',
  'Ko≈Ñ wykonuje 1 oddech na min. 3-4 sekundy': 'green',
  'Nie jest spocony': 'green',
  'Jest spocony u podstawy szyi i pod siod≈Çem': 'green',
  'Jest intensywnie spocony na szyi, pod siod≈Çem, w okolicach s≈Çabizny, ale nie widaƒá skapujƒÖcych stru≈ºek potu ani piany': 'yellow',
  'Pot skapuje z konia i jest miejscami spieniony': 'red',
  'Zainteresowany otoczeniem': 'green',
  'Obojƒôtny na otoczenie': 'yellow',
  'Zaniepokojony otoczeniem': 'red',
  'Ko≈Ñ chƒôtnie podƒÖ≈ºa za cz≈Çowiekiem, szuka kontaktu, chce powƒÖchaƒá dotknƒÖƒá': 'green',
  'Ko≈Ñ obojƒôtny wobec cz≈Çowieka, nie szuka kontaktu': 'yellow',
  'Ko≈Ñ wykazujacy lƒôk lub agresjƒô, reaguje nerwowo i przesadnie na gesty cz≈Çowieka': 'red',
  'Ko≈Ñ jest zainteresowany jedzeniem, w drugiej kolejno≈õci napije siƒô wody': 'green',
  'Ko≈Ñ spragniony, dopiero po napojeniu zainteresowany jedzeniem': 'yellow',
  'Ko≈Ñ niezainteresowany ani jedzeniem, ani wodƒÖ': 'red',
};

// üîπ Funkcja wyznaczajƒÖca kolor podkategorii
function getSubcategoryColor(selectedLabels: string[]): 'gray' | 'green' | 'yellow' | 'red' {
  if (selectedLabels.length === 0) return 'gray';
  let hasRed = false;
  let hasYellow = false;
  let hasGreen = false;

  for (const label of selectedLabels) {
    const color = behaviorColorMap[label];
    if (color === 'red') hasRed = true;
    if (color === 'yellow') hasYellow = true;
    if (color === 'green') hasGreen = true;
  }
  if (hasRed) return 'red';
  if (hasYellow) return 'yellow';
  if (hasGreen) return 'green';
  return 'gray';
}

type SzczegolyOcenyKoniaProps = {
  horseId: string;
  ocenaId: string;
  onBack: () => void;
};

export default function SzczegolyOcenyKonia({ horseId, ocenaId, onBack }: SzczegolyOcenyKoniaProps) {
  const [ocena, setOcena] = useState<any | null>(null);


  
  useEffect(() => {
    const fetchOcena = async () => {
      const snap = await getDoc(doc(db, 'konie', horseId, 'oceny', ocenaId));
      if (snap.exists()) {
        setOcena(snap.data());
      }
    };
    fetchOcena();
  }, [horseId, ocenaId]);

    // üîπ Obs≈Çuga przycisku "wstecz" w przeglƒÖdarce
   useEffect(() => {
    // Dodaj wpis do historii ‚Äì ≈ºeby przy klikniƒôciu wstecz wraca≈Ço do listy ocen
    window.history.pushState({ page: "ocena" }, "", window.location.href);

    const handlePopState = () => {
      onBack();
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      }, 0);
    };

    window.addEventListener("popstate", handlePopState);
    return () => {
      window.removeEventListener("popstate", handlePopState);
    };
  }, [onBack]);

  if (!ocena) return <p>‚è≥ ≈Åadowanie szczeg√≥≈Ç√≥w oceny...</p>;


  
  // Grupowanie danych
  const groupedByCategory: Record<string, Record<string, { key: string; val: boolean | string }[]>> = {};

  Object.entries(ocena.formData)
    .filter(([key, val]) => key !== 'narowy_inne_text' && (val === true || (typeof val === 'string' && val.trim() !== '')))
    .forEach(([key, val]) => {
      const prefix = key.split('_')[0];
      const category = prefixToCategory[prefix] || 'Inne';
      if (!groupedByCategory[category]) groupedByCategory[category] = {};
      if (!groupedByCategory[category][prefix]) groupedByCategory[category][prefix] = [];
      groupedByCategory[category][prefix].push({ key, val: val as boolean | string });
    });

  return (
    <div style={{ maxWidth: '900px', margin: '0 auto', padding: '2rem' }}>
      <h2>üìã Szczeg√≥≈Çy oceny konia</h2>

      {categoryOrder.map((category) =>
        groupedByCategory[category] ? (
          <fieldset key={category} style={{ border: '1px solid #ccc', borderRadius: '8px', padding: '1rem', marginBottom: '1.5rem' }}>
            <legend style={{ fontWeight: 'bold', fontSize: '1.1rem', color: '#0D1F40' }}>{category}</legend>

            {Object.entries(groupedByCategory[category]).map(([prefix, items]) => (
              <div key={prefix} style={{ marginBottom: '1rem' }}>
                <strong>{prefixToLabel[prefix] || prefix}</strong>{' '}
                <span
                  style={{
                    fontSize: '0.9rem',
                    marginLeft: '0.5rem',
                    color:
                      getSubcategoryColor(items.map(({ key }) => ocena.labelsByKey?.[key] || key)) === 'red'
                        ? 'red'
                        : getSubcategoryColor(items.map(({ key }) => ocena.labelsByKey?.[key] || key)) === 'yellow'
                        ? 'orange'
                        : 'green',
                  }}
                >
                  {(() => {
                    const color = getSubcategoryColor(items.map(({ key }) => ocena.labelsByKey?.[key] || key));
                    const descriptions: Record<string, string> = {
                      green: 'Zachowanie po≈ºƒÖdane',
                      yellow: 'Wymaga korekty',
                      red: 'Wymaga pilnej korekty',
                      gray: 'Brak wystarczajƒÖcych danych',
                    };
                    return `‚óè ${descriptions[color]}`;
                  })()}
                </span>
                <ul style={{ marginTop: '0.3rem', marginBottom: '0.5rem' }}>
                  {items.map(({ key, val }) => {
                    const label = ocena.labelsByKey?.[key] || key;
                    return (
                      <li key={key}>
                        {label}
                        {typeof val === 'string' ? `: ${val}` : ''}
                      </li>
                    );
                  })}
                  {prefix === 'narowy' && ocena.formData['narowy_inne'] === true && ocena.formData['narowy_inne_text'] && (
                    <li>
                      <em>Inne narowy:</em> {(ocena.formData['narowy_inne_text'] as string).trim()}
                    </li>
                  )}
                </ul>
              </div>
            ))}
          </fieldset>
        ) : null
      )}

<button
  onClick={() => {
    onBack();
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 0);
  }}
  style={{
    marginTop: '2rem',
    backgroundColor: '#0D1F40',
    color: 'white',
    padding: '0.7rem 1.5rem',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
  }}
>
  ‚Üê Wr√≥ƒá do listy ocen
</button>

    </div>
  );
}
